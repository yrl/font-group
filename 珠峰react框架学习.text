https://www.bilibili.com/video/av39847657/?p=1

第一课：
1:react的脚手架
react是一款框架：具备自己开发的独立思想（mvc:model view controller）
   ->划分组件开发
   ->基于路由的spa单页面开发
   ->基于ES6来编写代码（最后部署上线的时候，我们需要把ES6编译成ES5=》基于babel来完成编译）
   ->可能用到less/sass等,我们也需要使用对应的插件把他们进行预编译
   ->最后为了优化性能(减少http请求的次数,我们需要把JS或者CSS进行合并压缩)
   -> .....
   -> webpack来完成以上页面组件合并,js/css编译加合并等工作

   前端工程化开发:
   =>基于框架的组件化/模块化开发
   =>基于webpack的自动部署
   但是配置webpack是一个相对复杂的工作，我们需要自己安装很多的包，还需要自己写相对复杂的配置文件。。。，如果
   我们有一个插件，基于他可以快速构建一套完整的自动化工程项目结构，那么有助于提高开发效率=》“脚手架”



   第二课：create-create-app
   【脚手架生成目录中的一些内容】
    node_modules 当前项目中依赖的包都安装在这里
    node_modules 下的.bin 本地项目中可执行命令，在package.json的scripts中配置对应的脚本即可（
    其中有一个就是：react-scripts 命令）
    public 存放的是当前项目的html页面（单页面应用放一个index.html，多页面根据自己需求）

    在REACT框架中，所有的逻辑都是在JS中完成的（包括页面结构的创建），如果想给当前的页面导入一些css样式或者img图片等内容，我们有两种方式：
      1：在js中基于ES6 module模块规范，使用import导入，这样webpack在编译合并js的时候，会把导入的资源等插入到页面的结构中（
      绝对不能在js管控的结构中通过相对目录./或者../,导入资源,因为在webpack编译的时候,地址就不在是之前的相对地址了）
      2:如果不想在js中导入(js中导入的资源最后都会基于webpack编译),我们也可以把资源手动的在html中导入,但是html最后也要基于webpack
      编译,导入的地址也不建议写相对地址,而是使用%PUBLIC_URL% 写成绝对地址

   src 项目结构中最主要的目录，因为后期所有的js、路由、组件等都是放到这里面（包括需要编写的css或者图片等）

   .gitignore git提交时候的忽略提交文件配置项 

   package.json 当前项目的配置清单
   "dependencies": {
    "react": "^16.7.0",
    "react-dom": "^16.7.0",
    "react-scripts": "2.1.3"
  },
  基于脚手架生成工程目录，自动帮我们安装三个模块:react/react-dom/react-scripts
    react-scripts 集成了webpack需要的内容
    ->babel一套
    ->css处理的一套
    ->eslint 一套
    ->webpack 一套
    -> 其它的
    没有less/sass的处理内容(项目中使用less,我们需要自己额外的安装)

    "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
   可执行的脚本 "$ npm run  start / $ yarn start "
     start:开发环境下，基于webpack编译处理，最后可以预览当前开发的项目成果（在webpack
     中安装了webpack-dev-server插件，基于这个插件会自动创建一个web服务【端口号默认是3000】，webpack会帮我们自动打开浏览器，并且展示我们的页面，
     并且能够监听我们代码的改变，如果代码改变了，webpack会自动重新编译，并且刷新浏览器完成重新渲染）
     webpack 启动后自动打开浏览器的插件是：open-browser-webpack-plugin

     build:项目需要部署到服务器上，我们先执行 yarn  build ，把项目整体编译打包（完成后
     会在项目中生成一个 build文件夹，这个文件夹中包含了所有编译后的内容，我们把他上传到服务器即可）;而且在服务上进行部署的时候，不需要安装任何模块了
     （因为webpack已经把需要的内容都打包到一个js中了）

     第三课：react脚手架的深入剖析
     create-react-app 脚手架为了让结构目录清晰，把安装的webpack及配置文件都集成在了 react-script模块中，放到了node_modules中
      但是真实项目中，我们需要在脚手架默认安装的基础上，额外安装一些我们需要的模块，例如：react-router-dom/axios.... 再比如： less/less-loader...
      
      情况一：如果我们安装其他的组件，但是安装成功后不需要修改webpack的配置项，此时我们直接的安装，并且调取使用即可
      情况二：我们安装的插件是基于webpack处理的，也就是需要把安装的模块配置到webpack中（重新修改webpack配置项了）
      =》首先需要把隐藏到node——modules中的配置项暴露到项目中
      >$ yarn eject 
      首先会提示确认是否执行eject操作，这个操作是不可逆转的，一旦暴露出来配置项，就无
      法再隐藏回去了
       如果当前的项目基于git管理，在执行eject的时候，如果还有没有提交到历史区的内容，需要先提交到历史去，然后在
       eject才可以，否则报错：This git repository has untracked files or uncommitted changes:
      =》再去修改对应的配置项即可
      

      我们预览项目的时候，也是先基于webpack编译，把编译后的内容放到浏览中运行，
      所以如果项目中使用sass，我们需要修改webpack配置项，在配置项中加入sass的编译工作，这样后期预览项目，首先基于webpack把sass编译
      成css，然后再呈现在页面中



